### RULES_PYTHON ###

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

RULES_PYTHON_NAME = "rules_python"

RULES_PYTHON_TAG = "0.5.0"

RULES_PYTHON_SHA = "cd6730ed53a002c56ce4e2f396ba3b3be262fd7cb68339f0377a45e8227fe332"

RULES_PYTHON_REPO = "bazelbuild"

RULES_PYTHON_ARCHIVE = "tar.gz"

RULES_PYTHON_URL = "https://github.com/{repo}/{name}/releases/download/{tag}/{name}-{tag}.{archive}".format(
    name = RULES_PYTHON_NAME,
    archive = RULES_PYTHON_ARCHIVE,
    repo = RULES_PYTHON_REPO,
    tag = RULES_PYTHON_TAG,
)

# use http_archive rule to load rules_python repo
http_archive(
    name = RULES_PYTHON_NAME,
    sha256 = RULES_PYTHON_SHA,
    url = RULES_PYTHON_URL,
)

### RULES_CONDA ###

# use this instead of http_archive if you cloned the repo and want to use the local version
#local_repository(
#    name = "rules_conda",
#    path = "../",
#)

RULES_CONDA_NAME = "rules_conda"

RULES_CONDA_TAG = "0.0.6"

RULES_CONDA_SHA = "c5ad3a077bddff381790d64dd9cc1516b8133c1d695eb3eff4fed04a39dc4522"

RULES_CONDA_REPO = "spietras"

RULES_CONDA_ARCHIVE = "zip"

RULES_CONDA_URL = "https://github.com/{repo}/{name}/releases/download/{tag}/{name}-{tag}.{archive}".format(
    name = RULES_CONDA_NAME,
    archive = RULES_CONDA_ARCHIVE,
    repo = RULES_CONDA_REPO,
    tag = RULES_CONDA_TAG,
)

# use http_archive rule to load rules_conda repo
http_archive(
    name = RULES_CONDA_NAME,
    sha256 = RULES_CONDA_SHA,
    url = RULES_CONDA_URL,
)

load("@rules_conda//:defs.bzl", "conda_create", "load_conda", "register_toolchain")

# download and install conda
load_conda(
    conda_version = "4.10.3",  # optional, defaults to 4.10.3
    install_mamba = False,  # use True to install mamba, which a faster drop-in replacement for conda
    mamba_version = "0.17.0",  # optional, defaults to 0.17.0
    quiet = False,  # use True to hide conda output
)

# create environment with python2
conda_create(
    name = "py2_env",
    timeout = 600,  # each execute action can take up to 600 seconds
    clean = False,  # use True if you want to clean conda cache (less space taken, but slower subsequent builds)
    environment = "@//third_party/conda:py2_environment.yml",  # label pointing to environment.yml file
    quiet = False,  # use True to hide conda output
    use_mamba = False,  # use True to use mamba, which a faster drop-in replacement for conda
)

# create environment with python3
conda_create(
    name = "py3_env",
    timeout = 600,  # each execute action can take up to 600 seconds
    clean = False,  # use True if you want to clean conda cache (less space taken, but slower subsequent builds)
    environment = "@//third_party/conda:py3_environment.yml",  # label pointing to environment.yml file
    quiet = False,  # use True to hide conda output
    use_mamba = False,  # use True to use mamba, which a faster drop-in replacement for conda
)

# register pythons from environment as toolchain
register_toolchain(
    py2_env = "py2_env",  # python2 is optional
    py3_env = "py3_env",
)
